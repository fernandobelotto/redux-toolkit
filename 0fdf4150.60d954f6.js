/*! For license information please see 0fdf4150.60d954f6.js.LICENSE.txt */
(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{142:function(e,o,t){"use strict";t.r(o),o.default=t.p+"assets/images/int-tut-01-redux-devtools-7d5791a49c7eecdb47a3cbf97f436222.png"},56:function(e,o,t){"use strict";t.r(o),t.d(o,"frontMatter",(function(){return i})),t.d(o,"metadata",(function(){return s})),t.d(o,"rightToc",(function(){return c})),t.d(o,"default",(function(){return l}));var a=t(2),r=t(6),n=(t(90),t(89)),i={id:"intermediate-tutorial",title:"Tutorial intermedi\xe1rio",sidebar_label:"Tutorial intermedi\xe1rio",hide_title:!0},s={unversionedId:"tutorials/intermediate-tutorial",id:"tutorials/intermediate-tutorial",isDocsHomePage:!1,title:"Tutorial intermedi\xe1rio",description:"Tutorial intermedi\xe1rio: Redux Toolkit em a\xe7\xe3o",source:"@site/..\\docs\\tutorials\\intermediate-tutorial.md",slug:"/tutorials/intermediate-tutorial",permalink:"/redux-toolkit/tutorials/intermediate-tutorial",version:"current",sidebar_label:"Tutorial intermedi\xe1rio",sidebar:"docs",previous:{title:"Basic Tutorial",permalink:"/redux-toolkit/tutorials/basic-tutorial"},next:{title:"Advanced Tutorial",permalink:"/redux-toolkit/tutorials/advanced-tutorial"}},c=[{value:"Revisando o exemplo Redux Todos",id:"revisando-o-exemplo-redux-todos",children:[]},{value:"Etapas de convers\xe3o inicial",id:"etapas-de-convers\xe3o-inicial",children:[{value:"Adicionando Redux Toolkit ao projeto",id:"adicionando-redux-toolkit-ao-projeto",children:[]},{value:"Convertendo a store para usar <code>configureStore</code>",id:"convertendo-a-store-para-usar-configurestore",children:[]}]},{value:"Criando o Todos Slice",id:"criando-o-todos-slice",children:[{value:"Entendendo Slices",id:"entendendo-slices",children:[]},{value:"Examinando o reducer de todos original",id:"examinando-o-reducer-de-todos-original",children:[]},{value:"Escrevendo o slice reducer",id:"escrevendo-o-slice-reducer",children:[]},{value:"Atualizando os Testes Todos",id:"atualizando-os-testes-todos",children:[]},{value:"Implementando IDs de Todo",id:"implementando-ids-de-todo",children:[]}]},{value:"Usando o Novo Slice de Todos",id:"usando-o-novo-slice-de-todos",children:[{value:"Atualizando o reducer raiz",id:"atualizando-o-reducer-raiz",children:[]},{value:"Atualizando o componente Add Todo",id:"atualizando-o-componente-add-todo",children:[]},{value:"Atualizando a lista de todos",id:"atualizando-a-lista-de-todos",children:[]}]},{value:"Criando e usando o slice de filtros",id:"criando-e-usando-o-slice-de-filtros",children:[{value:"Escrevendo o slice de filtros",id:"escrevendo-o-slice-de-filtros",children:[]},{value:"Usando a Slice de filtros",id:"usando-a-slice-de-filtros",children:[]}]},{value:"Otimizando a filtragem de todo",id:"otimizando-a-filtragem-de-todo",children:[]},{value:"Cleanup",id:"cleanup",children:[]},{value:"Resumo",id:"resumo",children:[]}],d={rightToc:c};function l(e){var o=e.components,i=Object(r.a)(e,["components"]);return Object(n.b)("wrapper",Object(a.a)({},d,i,{components:o,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"tutorial-intermedi\xe1rio-redux-toolkit-em-a\xe7\xe3o"},"Tutorial intermedi\xe1rio: Redux Toolkit em a\xe7\xe3o"),Object(n.b)("p",null,"No ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/tutorials/basic-tutorial"}),"Tutorial b\xe1sico"),", voc\xea viu as principais fun\xe7\xf5es da API que est\xe3o inclu\xeddas no Redux Toolkit e alguns exemplos curtos de por que e como us\xe1-las. Voc\xea tamb\xe9m viu que pode usar Redux e RTK a partir de uma tag de script JS simples em uma p\xe1gina HTML, sem usar React, NPM, Webpack ou quaisquer ferramentas de build."),Object(n.b)("p",null,"Neste tutorial, voc\xea ver\xe1 como usar essas APIs em um pequeno aplicativo React. Especificamente, vamos converter o ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/introduction/examples#todos"}),'aplicativo de exemplo "todos" original do Redux')," para usar RTK."),Object(n.b)("p",null,"Isso mostrar\xe1 v\xe1rios conceitos:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},'Como converter o c\xf3digo "Redux simples" para usar RTK'),Object(n.b)("li",{parentName:"ul"},"Como usar RTK em um aplicativo React + Redux t\xedpico"),Object(n.b)("li",{parentName:"ul"},"Como alguns dos recursos mais poderosos do RTK podem ser usados \u200b\u200bpara simplificar seu c\xf3digo Redux")),Object(n.b)("p",null,"Al\xe9m disso, embora isso n\xe3o seja espec\xedfico do RTK, veremos algumas maneiras de melhorar seu c\xf3digo React-Redux tamb\xe9m."),Object(n.b)("p",null,"O c\xf3digo-fonte completo para o aplicativo convertido deste tutorial est\xe1 dispon\xedvel em ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/reduxjs/rtk-convert-todos-example"}),"github.com/reduxjs/rtk-convert-todos-example"),". Percorreremos o processo de convers\xe3o, conforme mostrado no hist\xf3rico deste repo. Links para commits individuais significativos ser\xe3o destacados em blocos de cita\xe7\xf5es, como este:"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},"Commit message here"))),Object(n.b)("h2",{id:"revisando-o-exemplo-redux-todos"},"Revisando o exemplo Redux Todos"),Object(n.b)("p",null,"Se inspecionarmos ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/reduxjs/redux/tree/9c9a4d2a1c62c9dbddcbb05488f8bd77d24c81de/examples/todos/src"}),'o c\xf3digo-fonte de exemplo "todos" atual'),", podemos observar algumas coisas:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"A fun\xe7\xe3o reducer ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/redux/blob/9c9a4d2a1c62c9dbddcbb05488f8bd77d24c81de/examples/todos/src/reducers/todos.js"}),Object(n.b)("inlineCode",{parentName:"a"},"todos")),' est\xe1 fazendo atualiza\xe7\xf5es imut\xe1veis "\xe0 m\xe3o", copiando objetos aninhados e arrays'),Object(n.b)("li",{parentName:"ul"},"O ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/redux/blob/9c9a4d2a1c62c9dbddcbb05488f8bd77d24c81de/examples/todos/src/actions/index.js"}),"arquivo ",Object(n.b)("inlineCode",{parentName:"a"},"actions"))," tem fun\xe7\xf5es action creators escritas \xe0 m\xe3o e as strings de tipo de action est\xe3o sendo duplicados entre o arquivo de actions e os arquivos de reducers"),Object(n.b)("li",{parentName:"ul"},"O c\xf3digo \xe9 apresentado usando uma ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://redux.js.org/faq/code-structure#what-should-my-file-structure-look-like-how-should-i-group-my-action-creators-and-reducers-in-my-project-where-should-my-selectors-go"}),'estrutura "pasta por tipo"'),", com arquivos separados para ",Object(n.b)("inlineCode",{parentName:"li"},"actions")," e ",Object(n.b)("inlineCode",{parentName:"li"},"reducers")),Object(n.b)("li",{parentName:"ul"},"Os componentes React s\xe3o escritos usando uma vers\xe3o estrita do padr\xe3o ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0"}),'"container/presentational"'),", onde ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/redux/tree/9c9a4d2a1c62c9dbddcbb05488f8bd77d24c81de/examples/todos/src/components"}),'os componentes "presentational" est\xe3o em uma pasta'),", e as defini\xe7\xf5es de conex\xe3o ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/redux/tree/9c9a4d2a1c62c9dbddcbb05488f8bd77d24c81de/examples/todos/src/containers"}),'Redux "cont\xeainer" est\xe3o em uma pasta diferente')),Object(n.b)("li",{parentName:"ul"},'Parte do c\xf3digo n\xe3o est\xe1 seguindo alguns dos padr\xf5es de "melhores pr\xe1ticas" do Redux que recomendados. Veremos alguns exemplos espec\xedficos ao longo deste tutorial.')),Object(n.b)("p",null,'Por um lado, este \xe9 um pequeno aplicativo de exemplo. O objetivo \xe9 ilustrar os fundamentos do uso real de React e Redux juntos, e n\xe3o necessariamente ser usado como "a maneira certa" de fazer as coisas em um aplicativo de produ\xe7\xe3o em escala real. Por outro lado, a maioria das pessoas usar\xe1 os padr\xf5es que v\xeaem em documentos e exemplos e, definitivamente, h\xe1 espa\xe7o para melhorias aqui.'),Object(n.b)("h2",{id:"etapas-de-convers\xe3o-inicial"},"Etapas de convers\xe3o inicial"),Object(n.b)("h3",{id:"adicionando-redux-toolkit-ao-projeto"},"Adicionando Redux Toolkit ao projeto"),Object(n.b)("p",null,'Como o exemplo de todos original est\xe1 no reposit\xf3rio Redux, come\xe7amos copiando o c\xf3digo-fonte "todos" do Redux para um novo projeto Create-React-App e adicionando Prettier ao projeto para ajudar a garantir que o c\xf3digo seja formatado de forma consistente. H\xe1 tamb\xe9m um arquivo ',Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://code.visualstudio.com/docs/languages/jsconfig"}),"jsconfig.json"),' para nos permitir usar "caminhos de importa\xe7\xe3o absolutos" que come\xe7am na pasta ',Object(n.b)("inlineCode",{parentName:"p"},"/src"),"."),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/a8e0a9a9d77b9dcd9e881079e7cca449084ca7b1"}),"Commit inicial"),"."),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/b866e205b9ebece84367f11d2faabc557bd08e23"}),"Adicione jsconfig.json para suportar importa\xe7\xf5es absolutas")))),Object(n.b)("p",null,"No tutorial b\xe1sico, acabamos de criar um link para o Redux Toolkit como uma tag de script individual. Mas, em um aplicativo t\xedpico, voc\xea precisa adicionar RTK como uma depend\xeancia de pacote em seu projeto. Isso pode ser feito com os gerenciadores de pacotes NPM ou Yarn:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"# Se voc\xea estiver usando o NPM:\nnpm install @reduxjs/toolkit\n\n# Ou com Yarn:\nyarn add @reduxjs/toolkit\n")),Object(n.b)("p",null,"Depois de conclu\xeddo, voc\xea deve adicionar e confirmar o arquivo ",Object(n.b)("inlineCode",{parentName:"p"},"package.json"),' modificado e o "arquivo lock" do seu gerenciador de pacotes (',Object(n.b)("inlineCode",{parentName:"p"},"package-lock.json")," para NPM, ou ",Object(n.b)("inlineCode",{parentName:"p"},"yarn.lock")," para Yarn)."),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/c3f47aeaecf855561e4db9d452b928f1b8b6c016"}),"Adicionar Redux Toolkit")))),Object(n.b)("p",null,"Feito isso, podemos come\xe7ar a trabalhar no c\xf3digo."),Object(n.b)("h3",{id:"convertendo-a-store-para-usar-configurestore"},"Convertendo a store para usar ",Object(n.b)("inlineCode",{parentName:"h3"},"configureStore")),Object(n.b)("p",null,'Assim como no exemplo do "contador", podemos substituir a fun\xe7\xe3o simples do Redux ',Object(n.b)("inlineCode",{parentName:"p"},"createStore")," pelo",Object(n.b)("inlineCode",{parentName:"p"}," configureStore")," do RTK. Isso configurar\xe1 automaticamente a extens\xe3o Redux DevTools para n\xf3s."),Object(n.b)("p",null,"As mudan\xe7as aqui s\xe3o simples. Atualizamos ",Object(n.b)("inlineCode",{parentName:"p"},"src/index.js")," para importar ",Object(n.b)("inlineCode",{parentName:"p"},"configureStore")," em vez da ",Object(n.b)("inlineCode",{parentName:"p"},"createStore"),", e substitu\xedmos a chamada da fun\xe7\xe3o. Lembre-se de que ",Object(n.b)("inlineCode",{parentName:"p"},"configureStore")," recebe um objeto de op\xe7\xf5es como um par\xe2metro com campos nomeados, ent\xe3o em vez de passar ",Object(n.b)("inlineCode",{parentName:"p"},"rootReducer")," diretamente como o primeiro par\xe2metro, n\xf3s o passamos como um campo de objeto chamado ",Object(n.b)("inlineCode",{parentName:"p"},"reducer"),":"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/cdfc15edbd82beda9ef0521aa191574b6cc7695a"}),"Converter a store para usar configureStore")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff",metastring:"{3-4,9-12}","{3-4,9-12}":!0}),'import React from "react";\nimport { render } from "react-dom";\n-import { createStore } from "redux";\n+import { configureStore } from "@reduxjs/toolkit";\nimport { Provider } from "react-redux";\nimport App from "./components/App";\nimport rootReducer from "./reducers";\n\n- const store = createStore(rootReducer);\n+ const store = configureStore({\n+   reducer: rootReducer,\n+});\n')),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Observe que ainda estamos usando a mesma fun\xe7\xe3o de redutor de raiz que j\xe1 est\xe1 no aplicativo e uma Redux store ainda est\xe1 sendo criada. Tudo o que mudou \xe9 que a sotre \xe9 configurada automaticamente com ferramentas para ajud\xe1-lo no desenvolvimento.")),Object(n.b)("p",null,"Se voc\xea tiver ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/zalmoxisus/redux-devtools-extension"}),"a extens\xe3o do navegador Redux DevTools")," instalada, voc\xea agora deve ser capaz de ver o estado atual se iniciar o aplicativo no modo de desenvolvimento e abrir a Extens\xe3o DevTools. Algo assim:"),Object(n.b)("p",null,Object(n.b)("img",{alt:"Redux DevTools Extension screenshot showing initial state",src:t(142).default})),Object(n.b)("h2",{id:"criando-o-todos-slice"},"Criando o Todos Slice"),Object(n.b)("p",null,'A primeira grande etapa para reescrever o aplicativo \xe9 converter a l\xf3gica Todos em um novo "slice".'),Object(n.b)("h3",{id:"entendendo-slices"},"Entendendo Slices"),Object(n.b)("p",null,"No momento, o c\xf3digo todos est\xe1 dividido em duas partes. A l\xf3gica do reducer est\xe1 em ",Object(n.b)("inlineCode",{parentName:"p"},"reducers/todos.js"),", enquanto os action creators est\xe3o em ",Object(n.b)("inlineCode",{parentName:"p"},"actions/index.js"),". Em um aplicativo maior, podemos at\xe9 ver as constantes de tipo de action em seu pr\xf3prio arquivo, como ",Object(n.b)("inlineCode",{parentName:"p"},"constants/todos.js"),", para que possam ser reutilizadas em ambos os lugares."),Object(n.b)("p",null,"N\xf3s ",Object(n.b)("em",{parentName:"p"},"podemos")," substituir aqueles que usam as fun\xe7\xf5es ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/api/createReducer"}),Object(n.b)("inlineCode",{parentName:"a"},"createReducer"))," e ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/api/createAction"}),Object(n.b)("inlineCode",{parentName:"a"},"createAction")),". No entanto, a fun\xe7\xe3o do RTK ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/api/createSlice"}),Object(n.b)("inlineCode",{parentName:"a"},"createSlice"))," nos permite consolidar essa l\xf3gica em um s\xf3 lugar. Ele usa ",Object(n.b)("inlineCode",{parentName:"p"},"createReducer")," e ",Object(n.b)("inlineCode",{parentName:"p"},"createAction")," internamente, ent\xe3o ",Object(n.b)("strong",{parentName:"p"},"na maioria dos aplicativos, voc\xea n\xe3o precisa us\xe1-los - ",Object(n.b)("inlineCode",{parentName:"strong"},"createSlice")," \xe9 tudo que voc\xea precisa"),"."),Object(n.b)("p",null,"Voc\xea pode estar se perguntando, \"o que \xe9 um 'slice', afinal?\". Uma aplica\xe7\xe3o Redux normal tem um objeto JS no topo de sua \xe1rvore de estado, e esse objeto \xe9 o resultado da chamada da fun\xe7\xe3o Redux ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/api/combinereducers"}),Object(n.b)("inlineCode",{parentName:"a"},"combineReducers")),' para juntar m\xfaltiplos o reducer funciona em um "reducer raiz" maior. ',Object(n.b)("strong",{parentName:"p"},'Referimo-nos a uma se\xe7\xe3o de chave/valor desse objeto como "slice" e usamos o termo ',Object(n.b)("a",Object(a.a)({parentName:"strong"},{href:"https://redux.js.org/recipes/structuring-reducers/splitting-reducer-logic"}),'"reducer slice"')," para descrever a fun\xe7\xe3o reducer respons\xe1vel por atualizar aquela slice (fatia) do estado"),"."),Object(n.b)("p",null,"Neste aplicativo, o reducer raiz se parece com:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import todos from './todos'\nimport visibilityFilter from './visibilityFilter'\n\nexport default combineReducers({\n  todos,\n  visibilityFilter\n})\n")),Object(n.b)("p",null,"Portanto, o estado combinado se parece com ",Object(n.b)("inlineCode",{parentName:"p"},'{todos: [], visibilityFilter:" SHOW_ALL"}'),". ",Object(n.b)("inlineCode",{parentName:"p"},"state.todos"),' \xe9 uma "slice", e a fun\xe7\xe3o reducer ',Object(n.b)("inlineCode",{parentName:"p"},"todos"),' \xe9 um "slice reducer".'),Object(n.b)("h3",{id:"examinando-o-reducer-de-todos-original"},"Examinando o reducer de todos original"),Object(n.b)("p",null,"A l\xf3gica do reducer todos original se parece com isto:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const todos = (state = [], action) => {\n  switch (action.type) {\n    case 'ADD_TODO':\n      return [\n        ...state,\n        {\n          id: action.id,\n          text: action.text,\n          completed: false\n        }\n      ]\n    case 'TOGGLE_TODO':\n      return state.map(todo =>\n        todo.id === action.id ? { ...todo, completed: !todo.completed } : todo\n      )\n    default:\n      return state\n  }\n}\n\nexport default todos\n")),Object(n.b)("p",null,"Podemos ver que ele lida com tr\xeas casos:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},"Adiciona um novo todo copiando o array ",Object(n.b)("inlineCode",{parentName:"li"},"state")," existente e adicionando uma nova entrada de todo no final"),Object(n.b)("li",{parentName:"ul"},"Ele lida com alternar uma entrada de todo copiando o array existente usando ",Object(n.b)("inlineCode",{parentName:"li"},"state.map()"),", copia e substitui o objeto de todos que precisa ser atualizado e deixa todas as outras entradas de todos sozinhas."),Object(n.b)("li",{parentName:"ul"},'Ele responde a todas as outras actions retornando o estado existente (efetivamente dizendo "N\xe3o me importo com essa action").')),Object(n.b)("p",null,"Ele tamb\xe9m inicializa o estado com um valor padr\xe3o de ",Object(n.b)("inlineCode",{parentName:"p"},"[]")," e faz uma exporta\xe7\xe3o padr\xe3o da fun\xe7\xe3o reducer."),Object(n.b)("h3",{id:"escrevendo-o-slice-reducer"},"Escrevendo o slice reducer"),Object(n.b)("p",null,"Podemos fazer o mesmo trabalho com ",Object(n.b)("inlineCode",{parentName:"p"},"createSlice"),", mas podemos faz\xea-lo de uma forma mais simples."),Object(n.b)("p",null,"Come\xe7aremos adicionando um novo arquivo chamado ",Object(n.b)("inlineCode",{parentName:"p"},"/features/todos/todosSlice.js"),". Observe que, embora n\xe3o importe como voc\xea realmente estrutura suas pastas e arquivos, descobrimos que ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/faq/code-structure#what-should-my-file-structure-look-like-how-should-i-group-my-action-creators-and-reducers-in-my-project-where-should-my-selectors-go"}),'uma abordagem de "pasta de recursos"')," geralmente funciona melhor para a maioria formul\xe1rios. O nome do arquivo tamb\xe9m depende inteiramente de voc\xea, mas \xe9 razo\xe1vel usar uma conven\xe7\xe3o de ",Object(n.b)("inlineCode",{parentName:"p"},"someFeatureSlice.js"),"."),Object(n.b)("p",null,"Neste arquivo, adicionaremos a seguinte l\xf3gica:"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/48ce059dbb0fce1b961631821534fbcb766d3471"}),"Adicionar um slice inicial de todos")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createSlice } from '@reduxjs/toolkit'\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {\n    addTodo(state, action) {\n      const { id, text } = action.payload\n      state.push({ id, text, completed: false })\n    },\n    toggleTodo(state, action) {\n      const todo = state.find(todo => todo.id === action.payload)\n      if (todo) {\n        todo.completed = !todo.completed\n      }\n    }\n  }\n})\n\nexport const { addTodo, toggleTodo } = todosSlice.actions\n\nexport default todosSlice.reducer\n")),Object(n.b)("h4",{id:"op\xe7\xf5es-de-createslice"},"Op\xe7\xf5es de ",Object(n.b)("inlineCode",{parentName:"h4"},"createSlice")),Object(n.b)("p",null,"Vamos analisar o que isso faz:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"createSlice")," takes an options object as its argument, with these options:",Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"name"),": a string that is used as the prefix for generated action types"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"initialState"),": the initial state value for the reducer"),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"reducers"),": an object, where the keys will become action type strings, and the functions are reducers that will be run when that action type is dispatched. (These are sometimes referred to as ",Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://redux.js.org/recipes/structuring-reducers/splitting-reducer-logic"}),'"case reducers"'),", because they're similar to a ",Object(n.b)("inlineCode",{parentName:"li"},"case")," in a ",Object(n.b)("inlineCode",{parentName:"li"},"switch")," statement)")))),Object(n.b)("p",null,"Assim, a fun\xe7\xe3o reducer de caso ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," ser\xe1 executada quando uma action com o tipo ",Object(n.b)("inlineCode",{parentName:"p"},'"todos/addTodo"')," for despachada."),Object(n.b)("p",null,"N\xe3o h\xe1 manipulador ",Object(n.b)("inlineCode",{parentName:"p"},"default")," aqui. O reducer gerado por ",Object(n.b)("inlineCode",{parentName:"p"},"createSlice")," ir\xe1 lidar automaticamente com todos os outros tipos de action, retornando o estado atual, ent\xe3o n\xe3o temos que listar isso n\xf3s mesmos."),Object(n.b)("h4",{id:"atualizar-l\xf3gica-mut\xe1vel"},'Atualizar L\xf3gica "Mut\xe1vel"'),Object(n.b)("p",null,"Observe que o reducer ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," est\xe1 chamando ",Object(n.b)("inlineCode",{parentName:"p"},"state.push()"),". Normalmente, isso \xe9 ruim, porque ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://doesitmutate.xyz/#push"}),"a fun\xe7\xe3o ",Object(n.b)("inlineCode",{parentName:"a"},"array.push()")," altera o array existente")," e ",Object(n.b)("strong",{parentName:"p"},Object(n.b)("a",Object(a.a)({parentName:"strong"},{href:"Https://redux.js.org/basics/reducers#handling-actions"}),"Redux reducers devem ",Object(n.b)("em",{parentName:"a"},"nunca")," sofrer muta\xe7\xe3o!")),"."),Object(n.b)("p",null,"No entanto, ",Object(n.b)("inlineCode",{parentName:"p"},"createSlice")," e ",Object(n.b)("inlineCode",{parentName:"p"},"createReducer")," envolvem sua fun\xe7\xe3o com ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/immerjs/immer"}),Object(n.b)("inlineCode",{parentName:"a"},"produce")," da biblioteca Immer"),". ",Object(n.b)("strong",{parentName:"p"},'Isso significa que voc\xea pode escrever um c\xf3digo que "modifique" o estado dentro do reducer, e o Immer retornar\xe1 com seguran\xe7a um resultado correto atualizado imutavelmente.')),Object(n.b)("p",null,"Da mesma forma, ",Object(n.b)("inlineCode",{parentName:"p"},"toggleTodo")," n\xe3o mapeia o array nem copia o objeto de todos correspondente. Em vez disso, ele apenas encontra o objeto de todo correspondente e o altera atribuindo ",Object(n.b)("inlineCode",{parentName:"p"},"todo.completed = !Todo.completed"),". Novamente, o Immer sabe que esse objeto foi atualizado e faz c\xf3pias do objeto todo e do array que o cont\xe9m."),Object(n.b)("p",null,"A l\xf3gica normal de atualiza\xe7\xe3o imut\xe1vel tende a obscurecer o que voc\xea est\xe1 realmente tentando fazer por causa de todas as c\xf3pias extras que precisam acontecer. Aqui, a inten\xe7\xe3o deve ser muito mais clara: estamos adicionando um item ao final de uma matriz e modificando um campo em uma entrada de tarefas."),Object(n.b)("h4",{id:"exportando-as-fun\xe7\xf5es-do-slice"},"Exportando as fun\xe7\xf5es do Slice"),Object(n.b)("p",null,Object(n.b)("inlineCode",{parentName:"p"},"createSlice")," retorna um objeto parecido com este:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),'{\n  name: "todos",\n  reducer: (state, action) => newState,\n  actions: {\n    addTodo: (payload) => ({type: "todos/addTodo", payload}),\n    toggleTodo: (payload) => ({type: "todos/toggleTodo", payload})\n  },\n  caseReducers: {\n    addTodo: (state, action) => newState,\n    toggleTodo: (state, action) => newState,\n  }\n}\n')),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},"Observe que ele gerou automaticamente as fun\xe7\xf5es actions creators apropriadas ",Object(n.b)("em",{parentName:"strong"},"e")," tipos de action para cada um de nossos reducers - n\xe3o precisamos escrev\xea-los \xe0 m\xe3o!")),Object(n.b)("p",null,"Precisaremos usar os action creators e o reducer em outros arquivos, ent\xe3o, no m\xednimo, precisar\xedamos exportar o objeto slice. No entanto, podemos usar uma conven\xe7\xe3o de c\xf3digo da comunidade Redux chamada ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/erikras/ducks-modular-redux"}),'o padr\xe3o "ducks"'),". Simplificando, ",Object(n.b)("strong",{parentName:"p"},"ele sugere que voc\xea deve colocar todos os seus action creators e reducers em um arquivo, fazer exporta\xe7\xf5es nomeadas dos action creators e uma exporta\xe7\xe3o padr\xe3o da fun\xe7\xe3o reducer"),"."),Object(n.b)("p",null,"Gra\xe7as ao ",Object(n.b)("inlineCode",{parentName:"p"},"createSlice"),', j\xe1 temos nossos action creators e reducer bem aqui em um arquivo. Tudo o que temos a fazer \xe9 export\xe1-los separadamente e nosso arquivo de slice agora corresponde ao padr\xe3o comum "ducks".'),Object(n.b)("h4",{id:"trabalhando-com-payloads"},"Trabalhando com payloads"),Object(n.b)("p",null,"Falando dos action creators, vamos voltar e reexaminar a l\xf3gica do reducer por um minuto."),Object(n.b)("p",null,"Por padr\xe3o, os action creators da fun\xe7\xe3o RTK ",Object(n.b)("inlineCode",{parentName:"p"},"createAction")," aceitam apenas um argumento. Esse argumento, seja ele qual for, \xe9 colocado no objeto de action como um campo chamado ",Object(n.b)("inlineCode",{parentName:"p"},"payload"),"."),Object(n.b)("p",null,"N\xe3o h\xe1 nada de especial sobre o campo ",Object(n.b)("inlineCode",{parentName:"p"},"action.payload"),' por si s\xf3. Redux n\xe3o conhece ou se preocupa com esse nome. Mas, como "ducks", o nome ',Object(n.b)("inlineCode",{parentName:"p"},"payload")," vem de outra conven\xe7\xe3o da comunidade Redux chamada ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/redux-utilities/flux-standard-action"}),'"Flux Standard Actions"'),"."),Object(n.b)("p",null,"As actions geralmente precisam incluir alguns dados extras junto com o campo ",Object(n.b)("inlineCode",{parentName:"p"},"type"),". O c\xf3digo Redux original para ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," tem um objeto de action que se parece com ",Object(n.b)("inlineCode",{parentName:"p"},"{type, id, text}"),". ",Object(n.b)("strong",{parentName:"p"},"A conven\xe7\xe3o FSA sugere que em vez de ter campos de dados com nomes aleat\xf3rios diretamente no objeto de action, voc\xea deve sempre colocar seus dados dentro de um campo denominado ",Object(n.b)("inlineCode",{parentName:"strong"},"payload")),"."),Object(n.b)("p",null,"Cabe ao reudcer estabelecer o que ele pensa que a ",Object(n.b)("inlineCode",{parentName:"p"},"payload")," deve ser para cada tipo de action, e qualquer c\xf3digo que despache a action precisa passar valores que correspondam a essa expectativa. Se apenas um valor for necess\xe1rio, voc\xea poderia us\xe1-lo diretamente como o valor ",Object(n.b)("inlineCode",{parentName:"p"},"payload")," inteiro. Mais comumente, voc\xea precisa passar v\xe1rios valores; nesse caso, ",Object(n.b)("inlineCode",{parentName:"p"},"payload")," deve ser um objeto contendo esses valores."),Object(n.b)("p",null,"Em nosso slice todos, ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," precisa de dois campos, ",Object(n.b)("inlineCode",{parentName:"p"},"id")," e ",Object(n.b)("inlineCode",{parentName:"p"},"text"),", ent\xe3o os colocamos em um objeto como ",Object(n.b)("inlineCode",{parentName:"p"},"payload"),". Para ",Object(n.b)("inlineCode",{parentName:"p"},"toggleTodo"),", o \xfanico valor que precisamos \xe9 o ",Object(n.b)("inlineCode",{parentName:"p"},"id")," do todo sendo alterado. Poder\xedamos ter feito isso como ",Object(n.b)("inlineCode",{parentName:"p"},"payload"),", mas eu prefiro sempre ter ",Object(n.b)("inlineCode",{parentName:"p"},"payload")," como um objeto, ent\xe3o eu fiz ",Object(n.b)("inlineCode",{parentName:"p"},"action.payload.id"),"."),Object(n.b)("p",null,"(Como uma pr\xe9via: existe ",Object(n.b)("em",{parentName:"p"},"sim")," uma maneira de personalizar como os payloads do objeto de action s\xe3o criados. Veremos isso mais tarde neste tutorial, ou voc\xea pode consultar ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/api/createAction"}),"os documentos da API ",Object(n.b)("inlineCode",{parentName:"a"},"createAction"))," para obter uma explica\xe7\xe3o.)"),Object(n.b)("h3",{id:"atualizando-os-testes-todos"},"Atualizando os Testes Todos"),Object(n.b)("p",null,"O reducer de todos original tem um arquivo de testes com ele. Podemos transferi-los para trabalhar com nosso slice de todos e verificar se ambos funcionam da mesma maneira."),Object(n.b)("p",null,"O primeiro passo \xe9 copiar ",Object(n.b)("inlineCode",{parentName:"p"},"reducers/todos.spec.js")," para ",Object(n.b)("inlineCode",{parentName:"p"},"features/todos/todosSlice.spec.js"),", e alterar o caminho de importa\xe7\xe3o para ler o reducer do arquivo slice."),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/b603312ddf55899e8a75522d407c40474948ae0b"}),"Copie os testes para todos slice")))),Object(n.b)("p",null,"Feito isso, precisamos atualizar os testes para corresponder ao funcionamento do RTK."),Object(n.b)("p",null,"O primeiro problema \xe9 que o arquivo de teste codifica os tipos de action como ",Object(n.b)("inlineCode",{parentName:"p"},"'ADD_TODO'"),". Os tipos de action do RTK se parecem com ",Object(n.b)("inlineCode",{parentName:"p"},"'todos/addTodo'"),". Podemos fazer refer\xeancia a isso importando tamb\xe9m os action creators da slice todos e substituindo as constantes de tipo original no teste por ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo.type"),"."),Object(n.b)("p",null,"O outro problema \xe9 que os objetos de action nos testes se parecem com ",Object(n.b)("inlineCode",{parentName:"p"},"{type, id, text}"),", enquanto o RTK sempre coloca esses valores extras dentro de ",Object(n.b)("inlineCode",{parentName:"p"},"action.payload"),". Portanto, precisamos modificar as actions de teste para corresponder a isso."),Object(n.b)("p",null,"(N\xf3s realmente ",Object(n.b)("em",{parentName:"p"},"podemos")," apenas substituir todos os objetos de action inline no teste por chamadas como ",Object(n.b)("inlineCode",{parentName:"p"},'addTodo ({id: 0, text:" Buy milk "})'),", mas este \xe9 um conjunto mais simples de altera\xe7\xf5es para mostrar por enquanto.)"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/39dbbf37bd4c559db956c8291bbd0bf1135546bb"}),"Transfira os testes todos para trabalhar com o slice todos")))),Object(n.b)("p",null,"Um exemplo das mudan\xe7as seria:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"// Altere as importa\xe7\xf5es para obter os action creators\n-import todos from './todosSlice'\n+import todos, { addTodo, toggleTodo } from './todosSlice'\n\n// depois, em um teste:\n  it('should handle ADD_TODO', () => {\n    expect(\n      todos([], {\n-       type: 'ADD_TODO',\n-       text: 'Run the tests',\n-       id: 0\n+       type: addTodo.type,\n+       payload: {\n+         text: 'Run the tests',\n+         id: 0\n+       }\n      })\n    ).toEqual([\n")),Object(n.b)("p",null,"Ap\xf3s essas mudan\xe7as, todos os testes em ",Object(n.b)("inlineCode",{parentName:"p"},"todosSlice.spec.js")," devem passar, provando que nosso novo reducer de slice RTK funciona exatamente da mesma forma que o reducer original escrito \xe0 m\xe3o!"),Object(n.b)("h3",{id:"implementando-ids-de-todo"},"Implementando IDs de Todo"),Object(n.b)("p",null,"No c\xf3digo original, cada todo rec\xe9m-adicionada obt\xe9m um valor de ID (um n\xfamero crescente):"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let nextTodoId = 0\nexport const addTodo = text => ({\n  type: 'ADD_TODO',\n  id: nextTodoId++,\n  text\n})\n")),Object(n.b)("p",null,"No momento, nosso slice de todos n\xe3o faz isso, porque o action creator ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," \xe9 gerado automaticamente para n\xf3s."),Object(n.b)("p",null,"N\xf3s ",Object(n.b)("em",{parentName:"p"},"podemos")," adicionar esse comportamento para exigir que qualquer c\xf3digo que envie o add todo deva passar um novo ID, como ",Object(n.b)("inlineCode",{parentName:"p"},'addTodo ({id: 1, text: "Buy milk"})'),", mas isso seria irritante. Por que o chamador deve rastrear esse valor? Al\xe9m disso, e se houver v\xe1rias partes do aplicativo que precisariam despachar essa action? Seria melhor encapsular essa l\xf3gica no action creator."),Object(n.b)("p",null,"O RTK permite que voc\xea personalize como o campo ",Object(n.b)("inlineCode",{parentName:"p"},"payload")," \xe9 criado em seus objetos de action. Se voc\xea estiver usando ",Object(n.b)("inlineCode",{parentName:"p"},"createAction"),' por si s\xf3, pode passar um "prepare callback" como o segundo argumento. Esta seria a apar\xeancia:'),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/0c9e3b721c209d368d23a70cf8faca8f308ff8df"}),"Implementar gera\xe7\xe3o de ID addTodo")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let nextTodoId = 0\n\nexport const addTodo = createAction('ADD_TODO', text => {\n  return {\n    payload: { id: nextTodoId++, text }\n  }\n})\n")),Object(n.b)("p",null,Object(n.b)("strong",{parentName:"p"},'Observe que o "preparar callback" ',Object(n.b)("em",{parentName:"strong"},"deve")," retornar um objeto com um campo chamado ",Object(n.b)("inlineCode",{parentName:"strong"},"payload")," dentro!")," Caso contr\xe1rio, o payload da action ser\xe1 undefined. Ele ",Object(n.b)("em",{parentName:"p"},"pode")," tamb\xe9m incluir um campo chamado ",Object(n.b)("inlineCode",{parentName:"p"},"meta"),", que pode ser usado para incluir metadados adicionais adicionais relacionados \xe0 action."),Object(n.b)("p",null,"Se voc\xea estiver usando ",Object(n.b)("inlineCode",{parentName:"p"},"createSlice"),", ele chama automaticamente ",Object(n.b)("inlineCode",{parentName:"p"},"createAction")," para voc\xea. Se precisar personalizar a carga \xfatil l\xe1, voc\xea pode fazer isso passando um objeto contendo as fun\xe7\xf5es ",Object(n.b)("inlineCode",{parentName:"p"},"reducer")," e ",Object(n.b)("inlineCode",{parentName:"p"},"prepare")," para o objeto ",Object(n.b)("inlineCode",{parentName:"p"},"reducers"),", em vez de apenas a fun\xe7\xe3o reducer em si:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"let nextTodoId = 0\n\nconst todosSlice = createSlice({\n  name: 'todos',\n  initialState: [],\n  reducers: {\n    addTodo: {\n      reducer(state, action) {\n        const { id, text } = action.payload\n        state.push({ id, text, completed: false })\n      },\n      prepare(text) {\n        return { payload: { text, id: nextTodoId++ } }\n      }\n    }\n  }\n}\n")),Object(n.b)("p",null,"Podemos adicionar um teste adicional que confirma que isso funciona:"),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"describe('addTodo', () => {\n  it('should generate incrementing todo IDs', () => {\n    const action1 = addTodo('a')\n    const action2 = addTodo('b')\n\n    expect(action1.payload).toEqual({ id: 0, text: 'a' })\n    expect(action2.payload).toEqual({ id: 1, text: 'b' })\n  })\n})\n")),Object(n.b)("h2",{id:"usando-o-novo-slice-de-todos"},"Usando o Novo Slice de Todos"),Object(n.b)("h3",{id:"atualizando-o-reducer-raiz"},"Atualizando o reducer raiz"),Object(n.b)("p",null,"Temos uma fun\xe7\xe3o reducer totalmente nova e brilhante, mas ela ainda n\xe3o est\xe1 conectada a nada."),Object(n.b)("p",null,"A primeira etapa \xe9 atualizar nosso reducer root para usar o slice reducer todos em vez do reducer original. Precisamos apenas alterar a instru\xe7\xe3o de importa\xe7\xe3o em ",Object(n.b)("inlineCode",{parentName:"p"},"reducers/index.js"),":"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/7b6e005377c856d7415e328387188260330ebae4"}),"Use o slice reducer todos")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"import { combineReducers } from 'redux'\n-import todos from './todos'\n+import todosReducer from 'features/todos/todosSlice'\nimport visibilityFilter from './visibilityFilter'\n\nexport default combineReducers({\n- todos,\n+ todos: todosReducer,\n  visibilityFilter\n})\n")),Object(n.b)("p",null,"Embora pud\xe9ssemos ter mantido a fun\xe7\xe3o importada nomeada como ",Object(n.b)("inlineCode",{parentName:"p"},"todos")," para que possamos usar a abrevia\xe7\xe3o literal do objeto com ",Object(n.b)("inlineCode",{parentName:"p"},"combineReducers"),", \xe9 um pouco mais claro se nomearmos a fun\xe7\xe3o importada como ",Object(n.b)("inlineCode",{parentName:"p"},"todosReducer")," e definir o campo como ",Object(n.b)("inlineCode",{parentName:"p"},"todos: todosReducer"),"."),Object(n.b)("h3",{id:"atualizando-o-componente-add-todo"},"Atualizando o componente Add Todo"),Object(n.b)("p",null,"Se recarregarmos o aplicativo, ainda devemos ver que ",Object(n.b)("inlineCode",{parentName:"p"},"state.todos"),' \xe9 um array vazio. Mas, se clicarmos em "Adicionar Todo", nada acontecer\xe1. Ainda estamos despachando a\xe7\xf5es cujo tipo \xe9 ',Object(n.b)("inlineCode",{parentName:"p"},"'ADD_TODO'"),", enquanto nosso slice de todos est\xe1 procurando por um tipo de a\xe7\xe3o ",Object(n.b)("inlineCode",{parentName:"p"},"'todos/addTodo'"),". Precisamos importar o action creator correta e us\xe1-lo no arquivo ",Object(n.b)("inlineCode",{parentName:"p"},"AddTodo.js"),"."),Object(n.b)("p",null,"J\xe1 que estamos nisso, existem alguns outros problemas com como o componente ",Object(n.b)("inlineCode",{parentName:"p"},"AddTodo"),' \xe9 escrito. Primeiro, ele est\xe1 usando uma "refer\xeancia de retorno" do React para ler o valor de texto atual da entrada quando voc\xea clica em "Add Todo". Isso funciona, mas a "forma de rea\xe7\xe3o" padr\xe3o para lidar com os campos do formul\xe1rio \xe9 com o padr\xe3o de "entradas controladas", onde o valor do campo atual \xe9 armazenado no estado do componente.'),Object(n.b)("p",null,"Em segundo lugar, o componente conectado est\xe1 recebendo ",Object(n.b)("inlineCode",{parentName:"p"},"dispatch")," como prop. Novamente, isso funciona, mas a maneira normal de usar connect \xe9 ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://react-redux.js.org/using-react-redux/connect-mapdispatch"}),"passar as fun\xe7\xf5es do action creator para ",Object(n.b)("inlineCode",{parentName:"a"},"connect"))," e, em seguida, despacha as action chamando as fun\xe7\xf5es que foram passadas como props."),Object(n.b)("p",null,"Uma vez que temos esse componente aberto, podemos corrigir esses problemas tamb\xe9m. Esta \xe9 a apar\xeancia da vers\xe3o final:"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/d7082409ebaa113b74f6989bf70ee09600f37d0b"}),"Atualizar AddTodo para despachar o novo tipo de action")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import React, { useState } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from 'features/todos/todosSlice'\n\nconst mapDispatch = { addTodo }\n\nconst AddTodo = ({ addTodo }) => {\n  const [todoText, setTodoText] = useState('')\n\n  const onChange = e => setTodoText(e.target.value)\n\n  return (\n    <div>\n      <form\n        onSubmit={e => {\n          e.preventDefault()\n          if (!todoText.trim()) {\n            return\n          }\n          addTodo(todoText)\n          setTodoText('')\n        }}\n      >\n        <input value={todoText} onChange={onChange} />\n        <button type=\"submit\">Add Todo</button>\n      </form>\n    </div>\n  )\n}\n\nexport default connect(null, mapDispatch)(AddTodo)\n")),Object(n.b)("p",null,"Come\xe7amos importando o action creator ",Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," correto de nosso slice de todos."),Object(n.b)("p",null,'A entrada agora est\xe1 sendo tratada como uma "entrada controlada" padr\xe3o, com o valor do texto sendo armazenado no estado do componente. Podemos usar esse valor de texto de estado no manipulador de envio do formul\xe1rio.'),Object(n.b)("p",null,"Finalmente, usamos a forma ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object"}),'"abrevia\xe7\xe3o de objeto" de ',Object(n.b)("inlineCode",{parentName:"a"},"mapDispatch"))," para simplifique a passagem dos action creator para ",Object(n.b)("inlineCode",{parentName:"p"},"connect"),'. A vers\xe3o "vinculada" de ',Object(n.b)("inlineCode",{parentName:"p"},"addTodo")," \xe9 passada para o componente como um prop e despachar\xe1 a action assim que a chamarmos."),Object(n.b)("h3",{id:"atualizando-a-lista-de-todos"},"Atualizando a lista de todos"),Object(n.b)("p",null,"Os componentes ",Object(n.b)("inlineCode",{parentName:"p"},"TodoList")," e ",Object(n.b)("inlineCode",{parentName:"p"},"VisibleTodoList")," t\xeam problemas semelhantes: eles est\xe3o usando o antigo action creator ",Object(n.b)("inlineCode",{parentName:"p"},"toggleTodo"),", e a configura\xe7\xe3o ",Object(n.b)("inlineCode",{parentName:"p"},"connect"),' n\xe3o est\xe1 usando a forma "abrevia\xe7\xe3o de objeto" de ',Object(n.b)("inlineCode",{parentName:"p"},"mapDispatch"),". Podemos consertar ambos."),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/b47b2124d6a28386b7461bccb9216682a81edb3e"}),"Atualize TodoList para despachar o novo tipo de action de toggle")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"// VisibleTodoList.js\n-import { toggleTodo } from '../actions'\n+import { toggleTodo } from 'features/todos/todosSlice'\n\n-const mapDispatchToProps = dispatch => ({\n- toggleTodo: id => dispatch(toggleTodo(id))\n-})\n+const mapDispatchToProps = { toggleTodo }\n")),Object(n.b)("p",null,"E com isso, agora devemos ser capazes de adicionar e alternar todos novamente, mas usando nosso novo slice de todos!"),Object(n.b)("h2",{id:"criando-e-usando-o-slice-de-filtros"},"Criando e usando o slice de filtros"),Object(n.b)("p",null,"Agora que criamos o slice todos e o conectamos \xe0 IU, podemos fazer o mesmo para a l\xf3gica de sele\xe7\xe3o de filtro."),Object(n.b)("h3",{id:"escrevendo-o-slice-de-filtros"},"Escrevendo o slice de filtros"),Object(n.b)("p",null,"A l\xf3gica do filtro \xe9 muito simples. Temos uma action, que define o valor do filtro atual, retornando o que est\xe1 na action. Aqui est\xe1 a fatia inteira:"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/b77f4155e3b45bce24d0d0ef6e2f7b0c3bd11ee1"}),"Add the filters slice")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createSlice } from '@reduxjs/toolkit'\n\nexport const VisibilityFilters = {\n  SHOW_ALL: 'SHOW_ALL',\n  SHOW_COMPLETED: 'SHOW_COMPLETED',\n  SHOW_ACTIVE: 'SHOW_ACTIVE'\n}\n\nconst filtersSlice = createSlice({\n  name: 'visibilityFilters',\n  initialState: VisibilityFilters.SHOW_ALL,\n  reducers: {\n    setVisibilityFilter(state, action) {\n      return action.payload\n    }\n  }\n})\n\nexport const { setVisibilityFilter } = filtersSlice.actions\n\nexport default filtersSlice.reducer\n")),Object(n.b)("p",null,"Copiamos o objeto enum ",Object(n.b)("inlineCode",{parentName:"p"},"VisibilityFilters")," que estava originalmente em ",Object(n.b)("inlineCode",{parentName:"p"},"actions/index.js"),". O c\xf3digo do slice apenas cria um reducer, exportamos o action creator e o reducer e pronto."),Object(n.b)("h3",{id:"usando-a-slice-de-filtros"},"Usando a Slice de filtros"),Object(n.b)("p",null,"Assim como com o reducer todos, precisamos importar e adicionar o reducer de visibilidade ao nosso reducer root:"),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/623c47b1987914a1d90142824892686ec76c20a1"}),"Use o slice reducer de filtros")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"import todosReducer from 'features/todos/todosSlice'\n-import visibilityFilter from './visibilityFilter'\n+import visibilityFilterReducer from 'features/filters/filtersSlice'\n\nexport default combineReducers({\n  todos: todosReducer,\n- visibilityFilter\n+ visibilityFilter: visibilityFilterReducer\n})\n")),Object(n.b)("p",null,"A partir da\xed, precisamos despachar a action ",Object(n.b)("inlineCode",{parentName:"p"},"setVisibilityFilter")," quando o usu\xe1rio clicar nos bot\xf5es. Primeiro, para consist\xeancia, devemos atualizar ",Object(n.b)("inlineCode",{parentName:"p"},"VisibleTodoList.js")," e ",Object(n.b)("inlineCode",{parentName:"p"},"Footer.js")," para usar o enum ",Object(n.b)("inlineCode",{parentName:"p"},"VisibilityFilter")," que \xe9 exportado do arquivo do slice de filtro, em vez daquele do arquivo de actions."),Object(n.b)("p",null,"A partir da\xed, os componentes do link dar\xe3o um pouco mais de trabalho. ",Object(n.b)("inlineCode",{parentName:"p"},"FilterLink")," est\xe1 atualmente criando novas fun\xe7\xf5es que capturam o valor atual de ",Object(n.b)("inlineCode",{parentName:"p"},"ownProps.filter"),", de modo que ",Object(n.b)("inlineCode",{parentName:"p"},"Link")," est\xe1 apenas obtendo uma fun\xe7\xe3o chamada ",Object(n.b)("inlineCode",{parentName:"p"},"onClick"),". Embora seja uma maneira v\xe1lida de fazer isso, para consist\xeancia, gostar\xedamos de continuar usando a forma abreviada de objeto de ",Object(n.b)("inlineCode",{parentName:"p"},"mapDispatch")," e modificar",Object(n.b)("inlineCode",{parentName:"p"}," Link")," para passar o valor do filtro quando ele despacha a action."),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/776b39088384513ff68af41039fe5fc5188fe8fb"}),"Use a nova action de filter na UI")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"// FilterLink.js\n-import { setVisibilityFilter } from '../actions'\n+import { setVisibilityFilter } from 'features/filters/filtersSlice'\n\n-const mapDispatchToProps = (dispatch, ownProps) => ({\n- onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n-})\n+const mapDispatchToProps = { setVisibilityFilter }\n\n\n// Link.js\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\n-const Link = ({ active, children, onClick }) => (\n+const Link = ({ active, children, setVisibilityFilter, filter }) => (\n  <button\n-    onClick={onClick}\n+    onClick={() => setVisibilityFilter(filter)}\n    disabled={active}\n    style={{\n      marginLeft: '4px'\n    }}\n  >\n    {children}\n  </button>\n)\n\nLink.propTypes = {\n  active: PropTypes.bool.isRequired,\n  children: PropTypes.node.isRequired,\n- onClick: PropTypes.func.isRequired\n+ setVisibilityFilter: PropTypes.func.isRequired,\n+ filter: PropTypes.string.isRequired\n}\n\nexport default Link\n")),Object(n.b)("p",null,"Novamente, observe que a maior parte disso n\xe3o tem a ver com RTK especificamente, mas \xe9 bom tentar usar de forma consistente algumas das melhores pr\xe1ticas recomendadas neste c\xf3digo de exemplo."),Object(n.b)("p",null,"Feito isso, devemos ser capazes de adicionar algumas todos, alternar o estado de algumas delas e, em seguida, alternar os filtros para alterar a lista de exibi\xe7\xe3o."),Object(n.b)("h2",{id:"otimizando-a-filtragem-de-todo"},"Otimizando a filtragem de todo"),Object(n.b)("p",null,"O componente ",Object(n.b)("inlineCode",{parentName:"p"},"VisibleTodoList")," atualmente usa uma fun\xe7\xe3o chamada ",Object(n.b)("inlineCode",{parentName:"p"},"getVisibleTodos"),' para fazer o trabalho de filtrar o array de todos para exibi\xe7\xe3o. Esta \xe9 uma "fun\xe7\xe3o selector", conforme descrito na p\xe1gina Redux docs em ',Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://redux.js.org/recipes/computing-derived-data"}),"Computing Derived Data"),". Ele encapsula o processo de leitura de valores da Redux store e extra\xe7\xe3o de parte ou todos esses valores para uso."),Object(n.b)("p",null,"No entanto, o c\xf3digo como escrito atualmente tem um problema. Se o filtro for definido como ",Object(n.b)("inlineCode",{parentName:"p"},"SHOW_COMPLETED")," ou ",Object(n.b)("inlineCode",{parentName:"p"},"SHOW_ACTIVE"),", ele ",Object(n.b)("em",{parentName:"p"},"sempre")," retornar\xe1 um novo array toda vez que for chamado. J\xe1 que est\xe1 sendo usado em uma fun\xe7\xe3o ",Object(n.b)("inlineCode",{parentName:"p"},"mapState"),", isso significa que ele retornar\xe1 uma nova refer\xeancia de array quando ",Object(n.b)("em",{parentName:"p"},"qualquer")," action for despachada."),Object(n.b)("p",null,"Neste pequeno aplicativo de exemplo de todos, isso n\xe3o \xe9 um problema. As \xfanicas action que temos envolvem alterar a lista de todos ou filtr\xe1-la, de qualquer maneira. Mas, em um aplicativo real, muitas outras actions ser\xe3o despachadas. Imagine se este aplicativo de tarefas tivesse um contador e ",Object(n.b)("inlineCode",{parentName:"p"},'"INCREMENT"')," fosse despachado enquanto a lista era filtrada. Criar\xedamos uma nova lista e ",Object(n.b)("inlineCode",{parentName:"p"},"TodoList")," teria que ser renderizado novamente, mesmo que nada mudasse."),Object(n.b)("p",null,"Embora esse n\xe3o seja um problema real de desempenho agora, vale a pena mostrar como podemos melhorar o comportamento."),Object(n.b)("p",null,"Aplicativos Redux normalmente usam uma biblioteca chamada ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/reduxjs/reselect"}),"Reselect"),", que tem uma fun\xe7\xe3o ",Object(n.b)("inlineCode",{parentName:"p"},"createSelector"),' que permite definir fun\xe7\xf5es selectors "memoizadas". Esses selectors memoizados apenas recalculam os valores se as entradas foram realmente alteradas.'),Object(n.b)("p",null,"O RTK reexporta a fun\xe7\xe3o ",Object(n.b)("inlineCode",{parentName:"p"},"createSelector")," de Reselect, para que possamos import\xe1-la e us\xe1-la em ",Object(n.b)("inlineCode",{parentName:"p"},"VisibleTodoList"),"."),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/4fc943b7111381974f20f74750a114b5e52ce1b2"}),"Converter todos vis\xedveis em um selector memoizado")))),Object(n.b)("pre",null,Object(n.b)("code",Object(a.a)({parentName:"pre"},{className:"language-diff"}),"import { connect } from 'react-redux'\n+import { createSelector } from '@reduxjs/toolkit'\nimport { toggleTodo } from 'features/todos/todosSlice'\nimport TodoList from '../components/TodoList'\nimport { VisibilityFilters } from 'features/filters/filtersSlice'\n\n-const getVisibleTodos = (todos, filter) => {\n-  switch (filter) {\n-    case VisibilityFilters.SHOW_ALL:\n-      return todos\n-    case VisibilityFilters.SHOW_COMPLETED:\n-      return todos.filter(t => t.completed)\n-    case VisibilityFilters.SHOW_ACTIVE:\n-      return todos.filter(t => !t.completed)\n-    default:\n-      throw new Error('Unknown filter: ' + filter)\n-  }\n-}\n\n+const selectTodos = state => state.todos\n+const selectFilter = state => state.visibilityFilter\n\n+const selectVisibleTodos = createSelector(\n+  [selectTodos, selectFilter],\n+  (todos, filter) => {\n+    switch (filter) {\n+      case VisibilityFilters.SHOW_ALL:\n+        return todos\n+      case VisibilityFilters.SHOW_COMPLETED:\n+        return todos.filter(t => t.completed)\n+      case VisibilityFilters.SHOW_ACTIVE:\n+        return todos.filter(t => !t.completed)\n+      default:\n+        throw new Error('Unknown filter: ' + filter)\n+    }\n+  }\n+)\n\nconst mapStateToProps = state => ({\n- todos: getVisibleTodos(state.todos, state.visibilityFilter)\n+ todos: selectVisibleTodos(state)\n})\n\nconst mapDispatchToProps = { toggleTodo }\n")),Object(n.b)("p",null,"Primeiro, importamos ",Object(n.b)("inlineCode",{parentName:"p"},"createSelector")," do RTK, e definimos algumas fun\xe7\xf5es selectors de uma linha que pegam os campos ",Object(n.b)("inlineCode",{parentName:"p"},"todos")," e ",Object(n.b)("inlineCode",{parentName:"p"},"visibilityFilter")," de seu argumento ",Object(n.b)("inlineCode",{parentName:"p"},"state"),"."),Object(n.b)("p",null,"Em seguida, chamamos ",Object(n.b)("inlineCode",{parentName:"p"},"createSelector"),' e passamos essas duas pequenas fun\xe7\xf5es de seletor no array "input selector". ',Object(n.b)("inlineCode",{parentName:"p"},"createSelector"),' ir\xe1 cham\xe1-los, pegar os valores de retorno e pass\xe1-los para o "output selector" que definimos, que pode ent\xe3o fazer a filtragem e retornar o resultado final.'),Object(n.b)("p",null,"H\xe1 algumas pequenas mudan\xe7as em como isso \xe9 definido e usado. Embora voc\xea possa dar \xe0s fun\xe7\xf5es selectors qualquer nome que desejar, ",Object(n.b)("inlineCode",{parentName:"p"},"selectX")," \xe9 uma conven\xe7\xe3o de nomenclatura mais comum do que ",Object(n.b)("inlineCode",{parentName:"p"},"getX"),". Al\xe9m disso, como os input selectors se encarregam de ler os valores necess\xe1rios, podemos apenas chamar ",Object(n.b)("inlineCode",{parentName:"p"},"selectVisibleTodos(state)"),", com ",Object(n.b)("inlineCode",{parentName:"p"},"state")," como o \xfanico argumento."),Object(n.b)("p",null,"Se executarmos novamente o aplicativo, a l\xf3gica de filtragem ",Object(n.b)("em",{parentName:"p"},"deve")," funcionar exatamente da mesma maneira que antes, pelo que voc\xea pode ver na IU."),Object(n.b)("h2",{id:"cleanup"},"Cleanup"),Object(n.b)("p",null,"Esse \xe9 o fim do trabalho de convers\xe3o. Agora temos v\xe1rios arquivos de action e reducers que n\xe3o est\xe3o mais sendo usados, portanto, devemos exclu\xed-los para limpar o projeto."),Object(n.b)("p",null,"Podemos remover com seguran\xe7a ",Object(n.b)("inlineCode",{parentName:"p"},"actions/index.js"),", ",Object(n.b)("inlineCode",{parentName:"p"},"reducers/todos.js"),", ",Object(n.b)("inlineCode",{parentName:"p"},"reducers/visibilityFilter.js")," e os arquivos de teste associados."),Object(n.b)("p",null,'Tamb\xe9m podemos tentar mudar completamente da estrutura "pasta por tipo" para uma estrutura de "pasta de recursos", movendo todos os arquivos de componentes para as pastas de recursos correspondentes.'),Object(n.b)("blockquote",null,Object(n.b)("ul",{parentName:"blockquote"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/fbc0b965949e082748b8613b734612226ffe9e94"}),"Remover arquivos de actino e reducers n\xe3o utilizados")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("a",Object(a.a)({parentName:"li"},{href:"https://github.com/reduxjs/rtk-convert-todos-example/commit/138cc162b1cc9c64ab67fae0a1171d07940414e6"}),"Consolidar componentes em pastas de recursos")))),Object(n.b)("p",null,"Se fizermos isso, a estrutura do c\xf3digo-fonte final ficar\xe1 assim:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"/src"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"/components"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"App.js")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"/features"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"/filters"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"FilterLink.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"filtersSlice.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Footer.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Link.js")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"/todos"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"AddTodo.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"Todo.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"TodoList.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"todosSlice.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"todosSlice.spec.js")),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"VisibleTodoList.js")))))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"/reducers"),Object(n.b)("ul",{parentName:"li"},Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"index.js")))),Object(n.b)("li",{parentName:"ul"},Object(n.b)("inlineCode",{parentName:"li"},"index.js"))))),Object(n.b)("p",null,'Todos t\xeam prefer\xeancias diferentes sobre o que torna uma estrutura de pastas "sustent\xe1vel", mas no geral esse resultado parece bastante consistente e f\xe1cil de seguir.'),Object(n.b)("p",null,"Agora, vamos ver a vers\xe3o final do c\xf3digo em a\xe7\xe3o!"),Object(n.b)("iframe",{src:"https://codesandbox.io/embed/rtk-convert-todos-example-uqqy3?fontsize=14&hidenavigation=1&module=%2Fsrc%2Ffeatures%2Ftodos%2FtodosSlice.js&theme=dark&view=editor",style:{width:"100%",height:"500px",border:0,borderRadius:"4px",overflow:"hidden"},title:"rtk-convert-todos-example",allow:"geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb",sandbox:"allow-modals allow-forms allow-popups allow-scripts allow-same-origin"}),Object(n.b)("h2",{id:"resumo"},"Resumo"),Object(n.b)("p",null,"Neste tutorial, voc\xea viu:"),Object(n.b)("ul",null,Object(n.b)("li",{parentName:"ul"},'Como usar RTK em um aplicativo React t\xedpico, incluindo adicionar o pacote, gravar arquivos "slice" e despachar actions de componentes React'),Object(n.b)("li",{parentName:"ul"},'Como usar reducers "mut\xe1veis", preparar payload de actions e escrever fun\xe7\xf5es seletors'),Object(n.b)("li",{parentName:"ul"},'Algumas t\xe9cnicas para simplificar o c\xf3digo React-Redux, como usar a forma "abrevia\xe7\xe3o de objeto" de ',Object(n.b)("inlineCode",{parentName:"li"},"mapDispatch")),Object(n.b)("li",{parentName:"ul"},'Exemplos de como usar uma estrutura de "pasta de recursos" para organizar seu c\xf3digo.')),Object(n.b)("p",null,"Esperamos isso ajudou a ilustrar como realmente usar esses m\xe9todos na pr\xe1tica."),Object(n.b)("p",null,"A seguir, o ",Object(n.b)("a",Object(a.a)({parentName:"p"},{href:"/redux-toolkit/tutorials/advanced-tutorial"}),"Tutorial avan\xe7ado")," examina como usar RTK em um aplicativo que busca dados ass\xedncronos e usa TypeScript."))}l.isMDXComponent=!0},89:function(e,o,t){"use strict";t.d(o,"a",(function(){return u})),t.d(o,"b",(function(){return b}));var a=t(0),r=t.n(a);function n(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function i(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?i(Object(t),!0).forEach((function(o){n(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function c(e,o){if(null==e)return{};var t,a,r=function(e,o){if(null==e)return{};var t,a,r={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],o.indexOf(t)>=0||(r[t]=e[t]);return r}(e,o);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),l=function(e){var o=r.a.useContext(d),t=o;return e&&(t="function"==typeof e?e(o):s(s({},o),e)),t},u=function(e){var o=l(e.components);return r.a.createElement(d.Provider,{value:o},e.children)},p={inlineCode:"code",wrapper:function(e){var o=e.children;return r.a.createElement(r.a.Fragment,{},o)}},m=r.a.forwardRef((function(e,o){var t=e.components,a=e.mdxType,n=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,b=u["".concat(i,".").concat(m)]||u[m]||p[m]||n;return t?r.a.createElement(b,s(s({ref:o},d),{},{components:t})):r.a.createElement(b,s({ref:o},d))}));function b(e,o){var t=arguments,a=o&&o.mdxType;if("string"==typeof e||a){var n=t.length,i=new Array(n);i[0]=m;var s={};for(var c in o)hasOwnProperty.call(o,c)&&(s[c]=o[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<n;d++)i[d]=t[d];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},90:function(e,o,t){"use strict";e.exports=t(91)},91:function(e,o,t){"use strict";var a=t(92),r="function"==typeof Symbol&&Symbol.for,n=r?Symbol.for("react.element"):60103,i=r?Symbol.for("react.portal"):60106,s=r?Symbol.for("react.fragment"):60107,c=r?Symbol.for("react.strict_mode"):60108,d=r?Symbol.for("react.profiler"):60114,l=r?Symbol.for("react.provider"):60109,u=r?Symbol.for("react.context"):60110,p=r?Symbol.for("react.concurrent_mode"):60111,m=r?Symbol.for("react.forward_ref"):60112,b=r?Symbol.for("react.suspense"):60113,j=r?Symbol.for("react.memo"):60115,O=r?Symbol.for("react.lazy"):60116,f="function"==typeof Symbol&&Symbol.iterator;function v(e,o,t,a,r,n,i,s){if(!e){if(e=void 0,void 0===o)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[t,a,r,n,i,s],d=0;(e=Error(o.replace(/%s/g,(function(){return c[d++]})))).name="Invariant Violation"}throw e.framesToPop=1,e}}function N(e){for(var o=arguments.length-1,t="https://reactjs.org/docs/error-decoder.html?invariant="+e,a=0;a<o;a++)t+="&args[]="+encodeURIComponent(arguments[a+1]);v(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",t)}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function x(e,o,t){this.props=e,this.context=o,this.refs=h,this.updater=t||g}function y(){}function C(e,o,t){this.props=e,this.context=o,this.refs=h,this.updater=t||g}x.prototype.isReactComponent={},x.prototype.setState=function(e,o){"object"!=typeof e&&"function"!=typeof e&&null!=e&&N("85"),this.updater.enqueueSetState(this,e,o,"setState")},x.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=x.prototype;var T=C.prototype=new y;T.constructor=C,a(T,x.prototype),T.isPureReactComponent=!0;var q={current:null},k={current:null},S=Object.prototype.hasOwnProperty,R={key:!0,ref:!0,__self:!0,__source:!0};function A(e,o,t){var a=void 0,r={},i=null,s=null;if(null!=o)for(a in void 0!==o.ref&&(s=o.ref),void 0!==o.key&&(i=""+o.key),o)S.call(o,a)&&!R.hasOwnProperty(a)&&(r[a]=o[a]);var c=arguments.length-2;if(1===c)r.children=t;else if(1<c){for(var d=Array(c),l=0;l<c;l++)d[l]=arguments[l+2];r.children=d}if(e&&e.defaultProps)for(a in c=e.defaultProps)void 0===r[a]&&(r[a]=c[a]);return{$$typeof:n,type:e,key:i,ref:s,props:r,_owner:k.current}}function z(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var E=/\/+/g,P=[];function w(e,o,t,a){if(P.length){var r=P.pop();return r.result=e,r.keyPrefix=o,r.func=t,r.context=a,r.count=0,r}return{result:e,keyPrefix:o,func:t,context:a,count:0}}function D(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function F(e,o,t,a){var r=typeof e;"undefined"!==r&&"boolean"!==r||(e=null);var s=!1;if(null===e)s=!0;else switch(r){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case i:s=!0}}if(s)return t(a,e,""===o?"."+L(e,0):o),1;if(s=0,o=""===o?".":o+":",Array.isArray(e))for(var c=0;c<e.length;c++){var d=o+L(r=e[c],c);s+=F(r,d,t,a)}else if(null===e||"object"!=typeof e?d=null:d="function"==typeof(d=f&&e[f]||e["@@iterator"])?d:null,"function"==typeof d)for(e=d.call(e),c=0;!(r=e.next()).done;)s+=F(r=r.value,d=o+L(r,c++),t,a);else"object"===r&&N("31","[object Object]"===(t=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":t,"");return s}function _(e,o,t){return null==e?0:F(e,"",o,t)}function L(e,o){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var o={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return o[e]}))}(e.key):o.toString(36)}function V(e,o){e.func.call(e.context,o,e.count++)}function I(e,o,t){var a=e.result,r=e.keyPrefix;e=e.func.call(e.context,o,e.count++),Array.isArray(e)?M(e,a,t,(function(e){return e})):null!=e&&(z(e)&&(e=function(e,o){return{$$typeof:n,type:e.type,key:o,ref:e.ref,props:e.props,_owner:e._owner}}(e,r+(!e.key||o&&o.key===e.key?"":(""+e.key).replace(E,"$&/")+"/")+t)),a.push(e))}function M(e,o,t,a,r){var n="";null!=t&&(n=(""+t).replace(E,"$&/")+"/"),_(e,I,o=w(o,n,a,r)),D(o)}function H(){var e=q.current;return null===e&&N("321"),e}var $={Children:{map:function(e,o,t){if(null==e)return e;var a=[];return M(e,a,null,o,t),a},forEach:function(e,o,t){if(null==e)return e;_(e,V,o=w(null,null,o,t)),D(o)},count:function(e){return _(e,(function(){return null}),null)},toArray:function(e){var o=[];return M(e,o,null,(function(e){return e})),o},only:function(e){return z(e)||N("143"),e}},createRef:function(){return{current:null}},Component:x,PureComponent:C,createContext:function(e,o){return void 0===o&&(o=null),(e={$$typeof:u,_calculateChangedBits:o,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},lazy:function(e){return{$$typeof:O,_ctor:e,_status:-1,_result:null}},memo:function(e,o){return{$$typeof:j,type:e,compare:void 0===o?null:o}},useCallback:function(e,o){return H().useCallback(e,o)},useContext:function(e,o){return H().useContext(e,o)},useEffect:function(e,o){return H().useEffect(e,o)},useImperativeHandle:function(e,o,t){return H().useImperativeHandle(e,o,t)},useDebugValue:function(){},useLayoutEffect:function(e,o){return H().useLayoutEffect(e,o)},useMemo:function(e,o){return H().useMemo(e,o)},useReducer:function(e,o,t){return H().useReducer(e,o,t)},useRef:function(e){return H().useRef(e)},useState:function(e){return H().useState(e)},Fragment:s,StrictMode:c,Suspense:b,createElement:A,cloneElement:function(e,o,t){null==e&&N("267",e);var r=void 0,i=a({},e.props),s=e.key,c=e.ref,d=e._owner;if(null!=o){void 0!==o.ref&&(c=o.ref,d=k.current),void 0!==o.key&&(s=""+o.key);var l=void 0;for(r in e.type&&e.type.defaultProps&&(l=e.type.defaultProps),o)S.call(o,r)&&!R.hasOwnProperty(r)&&(i[r]=void 0===o[r]&&void 0!==l?l[r]:o[r])}if(1===(r=arguments.length-2))i.children=t;else if(1<r){l=Array(r);for(var u=0;u<r;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:n,type:e.type,key:s,ref:c,props:i,_owner:d}},createFactory:function(e){var o=A.bind(null,e);return o.type=e,o},isValidElement:z,version:"16.8.6",unstable_ConcurrentMode:p,unstable_Profiler:d,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:q,ReactCurrentOwner:k,assign:a}},U={default:$},K=U&&$||U;e.exports=K.default||K},92:function(e,o,t){"use strict";var a=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;function i(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var o={},t=0;t<10;t++)o["_"+String.fromCharCode(t)]=t;if("0123456789"!==Object.getOwnPropertyNames(o).map((function(e){return o[e]})).join(""))return!1;var a={};return"abcdefghijklmnopqrst".split("").forEach((function(e){a[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},a)).join("")}catch(r){return!1}}()?Object.assign:function(e,o){for(var t,s,c=i(e),d=1;d<arguments.length;d++){for(var l in t=Object(arguments[d]))r.call(t,l)&&(c[l]=t[l]);if(a){s=a(t);for(var u=0;u<s.length;u++)n.call(t,s[u])&&(c[s[u]]=t[s[u]])}}return c}}}]);